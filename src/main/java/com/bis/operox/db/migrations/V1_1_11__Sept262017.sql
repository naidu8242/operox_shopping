
DROP TABLE IF EXISTS `operox`.`RECEIVED_STOCK`;
CREATE TABLE `operox`.`RECEIVED_STOCK` (
  ID BIGINT NOT NULL AUTO_INCREMENT,
  SUPPLIER_ID BIGINT,
  STORE_ID BIGINT,
  ORDER_DATE DATE,
  DELIVERY_DATE DATE,
  ORDER_STATUS VARCHAR(50),
  STATUS INT,
  
  RECEIVED_NUMBER VARCHAR(50),
  POD_NUMBER VARCHAR(50),
  SUPPLIER_INVOICE_NUMBER VARCHAR(50),
  WAREHOUSE BIGINT,
  PAYMENT_STATUS VARCHAR(50),
  NUMBER_OF_PACKAGES VARCHAR(50),
  AMOUNT VARCHAR(50),
  RECEIVING_USER_ID BIGINT,
  TAX_ID BIGINT,
  COMMENT VARCHAR(50),
  DISCOUNT VARCHAR(50),
  DISCOUNT_TYPE VARCHAR(50),
  TOTAL_AMOUNT  VARCHAR(50),
  
  CREATED_DATE DATE,
  CREATED_BY VARCHAR(10),
  UPDATED_DATE DATE,
  UPDATED_BY VARCHAR(10),
  FOREIGN KEY(SUPPLIER_ID) REFERENCES `operox`.`SUPPLIER`(ID),
  FOREIGN KEY(STORE_ID) REFERENCES `operox`.`STORE`(ID),
  FOREIGN KEY(TAX_ID) REFERENCES `operox`.`TAX`(ID),
  FOREIGN KEY(RECEIVING_USER_ID) REFERENCES `operox`.`USER`(ID),
  FOREIGN KEY(WAREHOUSE) REFERENCES `operox`.`STORE`(ID),
  PRIMARY KEY (`ID`) 
); 


DROP TABLE IF EXISTS `operox`.`RECEIVED_STOCK_ITEMS`;
CREATE TABLE `operox`.`RECEIVED_STOCK_ITEMS` (
  ID BIGINT NOT NULL AUTO_INCREMENT,
  PRODUCT_ID BIGINT,
  RECEIVED_STOCK_ID BIGINT,
  QUANTITY VARCHAR(100),
  STATUS INT,
  
  BATCH_ID VARCHAR(100),
  MANFATUREDATE DATE,
  EXPIREDATE  DATE,
  
  
  CREATED_DATE DATE,
  CREATED_BY VARCHAR(10),
  UPDATED_DATE DATE,
  UPDATED_BY VARCHAR(10),
  FOREIGN KEY(PRODUCT_ID) REFERENCES `operox`.`PRODUCT`(ID),
  FOREIGN KEY(RECEIVED_STOCK_ID) REFERENCES `operox`.`RECEIVED_STOCK`(ID),
  PRIMARY KEY (`ID`) 
); 


DROP TABLE IF EXISTS `operox`.`STOCK_RETURNS_ITEMS`;
CREATE TABLE `operox`.`STOCK_RETURNS_ITEMS` (
  ID BIGINT NOT NULL AUTO_INCREMENT,
  PRODUCT_ID BIGINT,
  RECEIVED_STOCK_ID BIGINT,
  QUANTITY VARCHAR(100),
  STATUS INT,
  CREATED_DATE DATE,
  CREATED_BY VARCHAR(10),
  UPDATED_DATE DATE,
  UPDATED_BY VARCHAR(10),
  FOREIGN KEY(PRODUCT_ID) REFERENCES `operox`.`PRODUCT`(ID),
  FOREIGN KEY(RECEIVED_STOCK_ID) REFERENCES `operox`.`RECEIVED_STOCK`(ID),
  PRIMARY KEY (`ID`) 
); 